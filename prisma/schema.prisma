// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PublicFile {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url               String
  key               String
  size              Int
  ActionTypeMessage ActionTypeMessage[]
  ActionTypeChat    ActionTypeChat[]
}

model User {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username        String    @unique
  paymentMethodId String?
  token           String?
  userInfo        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  Setting         Setting[]
  Action          Action[]
}

model Setting {
  id                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  telegramEnabled         Boolean  @default(false)
  telegramUsername        String?
  whatsappEnabled         Boolean  @default(false)
  whatsappNumber          String?  @default("")
  whatsappGreetingMessage String?  @default("")
  appendWazzupId          Boolean  @default(true)
  name                    String   @default("")
  appearance              Json     @default("{ \"hello\": \"world\" }")
  hidden                  Boolean  @default(false)
  user                    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                  String?  @db.Uuid
  createdAt               DateTime @default(now())
  updatedAt               DateTime @default(now())
  Action                  Action[]

  @@index([name], type: BTree)
}

model Action {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type              String             @default("legacy") @db.VarChar(30)
  name              String             @default("Action")
  query             Json               @default("{ \"query\": [] }")
  enabled           Boolean            @default(true)
  user              User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId            String?            @db.Uuid
  setting           Setting?           @relation(fields: [settingId], references: [id], onDelete: SetNull)
  settingId         String?            @db.Uuid
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  ActionTypeModal   ActionTypeModal?
  ActionTypeMessage ActionTypeMessage?
  ActionTypeChat    ActionTypeChat?
}

model ActionTypeMessage {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  action        Action      @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId      String      @unique @db.Uuid
  redirect      String      @default("whatsapp-and-telegram")
  avatarEnabled Boolean     @default(false)
  avatar        PublicFile? @relation(fields: [avatarId], references: [id], onDelete: Cascade)
  avatarId      String?     @db.Uuid
  title         String?
  text          String
  isDark        Boolean     @default(false)
  branding      Boolean     @default(true)
}

model ActionTypeChat {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  action             Action      @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId           String      @unique @db.Uuid
  redirect           String      @default("whatsapp-and-telegram")
  avatar             PublicFile? @relation(fields: [avatarId], references: [id], onDelete: Cascade)
  avatarId           String?     @db.Uuid
  operatorName       String
  messageNumber1     String
  messageNumber2     String?
  quickAnswerEnabled Boolean     @default(false)
  quickAnswer        Json?
  branding           Boolean     @default(true)
}

model ActionTypeModal {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  action             Action  @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId           String  @unique @db.Uuid
  redirect           String  @default("whatsapp-and-telegram")
  backgroundPosition String  @default("right")
  // backgroundImage    PublicFile? @relation(fields: [backgroundImageId], references: [id], onDelete: Cascade)
  // backgroundImageId           String?  @unique @db.Uuid
  // logo PublicFile? @relation(fields: [logoId], references: [id], onDelete: Cascade)
  // logoId           String?  @unique @db.Uuid
  text               String?
  extraTextEnabled   Boolean @default(false)
  whatsappButtonText String?
  whatsappQrcodeText String?
  telegramButtonText String?
  telegramQrcodeText String?
  isDark             Boolean @default(false)
  branding           Boolean @default(true)
}
